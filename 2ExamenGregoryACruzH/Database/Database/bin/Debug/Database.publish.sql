/*
Deployment script for SistemaRH

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SistemaRH"
:setvar DefaultFilePrefix "SistemaRH"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [exp].[Empleado].[Identificacion] on table [exp].[Empleado] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [exp].[Empleado].[IdTipoIdentificacion] on table [exp].[Empleado] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [exp].[Empleado])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Creating Schema [acc]...';


GO
CREATE SCHEMA [acc]
    AUTHORIZATION [dbo];


GO
PRINT N'Starting rebuilding table [exp].[Empleado]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [exp].[tmp_ms_xx_Empleado] (
    [IdEmpleado]           INT          IDENTITY (1, 1) NOT NULL,
    [IdTipoIdentificacion] INT          NOT NULL,
    [Identificacion]       VARCHAR (50) NOT NULL,
    [Nombre]               VARCHAR (50) NOT NULL,
    [PrimerApellido]       VARCHAR (50) NOT NULL,
    [SegundoApellido]      VARCHAR (50) NOT NULL,
    [Edad]                 INT          NOT NULL,
    [FechaNacimiento]      DATETIME     NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Empleado1] PRIMARY KEY CLUSTERED ([IdEmpleado] ASC)
)
WITH (DATA_COMPRESSION = PAGE);

IF EXISTS (SELECT TOP 1 1 
           FROM   [exp].[Empleado])
    BEGIN
        SET IDENTITY_INSERT [exp].[tmp_ms_xx_Empleado] ON;
        INSERT INTO [exp].[tmp_ms_xx_Empleado] ([IdEmpleado], [Nombre], [PrimerApellido], [SegundoApellido], [Edad], [FechaNacimiento])
        SELECT   [IdEmpleado],
                 [Nombre],
                 [PrimerApellido],
                 [SegundoApellido],
                 [Edad],
                 [FechaNacimiento]
        FROM     [exp].[Empleado]
        ORDER BY [IdEmpleado] ASC;
        SET IDENTITY_INSERT [exp].[tmp_ms_xx_Empleado] OFF;
    END

DROP TABLE [exp].[Empleado];

EXECUTE sp_rename N'[exp].[tmp_ms_xx_Empleado]', N'Empleado';

EXECUTE sp_rename N'[exp].[tmp_ms_xx_constraint_PK_Empleado1]', N'PK_Empleado', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Table [acc].[Contrato]...';


GO
CREATE TABLE [acc].[Contrato] (
    [IdContrato]   INT          IDENTITY (1, 1) NOT NULL,
    [IdEmpleado]   INT          NOT NULL,
    [TipoContrato] VARCHAR (50) NOT NULL,
    [FechaInicio]  DATETIME     NOT NULL,
    [FechaFin]     DATETIME     NULL,
    CONSTRAINT [PK_Contrato] PRIMARY KEY CLUSTERED ([IdContrato] ASC)
)
WITH (DATA_COMPRESSION = PAGE);


GO
PRINT N'Creating Table [dbo].[TipoIdentificacion]...';


GO
CREATE TABLE [dbo].[TipoIdentificacion] (
    [IdTipoIdentificacion] INT          IDENTITY (1, 1) NOT NULL,
    [Descripcion]          VARCHAR (50) NULL,
    CONSTRAINT [PK_TipoIdentificacion] PRIMARY KEY CLUSTERED ([IdTipoIdentificacion] ASC)
)
WITH (DATA_COMPRESSION = PAGE);


GO
PRINT N'Creating Foreign Key [exp].[FK_Empleado_TipoIdentificacion]...';


GO
ALTER TABLE [exp].[Empleado] WITH NOCHECK
    ADD CONSTRAINT [FK_Empleado_TipoIdentificacion] FOREIGN KEY ([IdTipoIdentificacion]) REFERENCES [dbo].[TipoIdentificacion] ([IdTipoIdentificacion]);


GO
PRINT N'Creating Foreign Key [acc].[FK_Empleado_Contrato]...';


GO
ALTER TABLE [acc].[Contrato] WITH NOCHECK
    ADD CONSTRAINT [FK_Empleado_Contrato] FOREIGN KEY ([IdEmpleado]) REFERENCES [exp].[Empleado] ([IdEmpleado]);


GO
PRINT N'Altering Procedure [EXP].[EmpleadoActualizar]...';


GO
ALTER PROCEDURE [EXP].[EmpleadoActualizar]
    @IdEmpleado int,
	@IdTipoIdentificacion int,
	@Identificacion varchar(50),
	@Nombre varchar(50),
	@PrimerApellido varchar(50),
	@SegundoApellido varchar(50),
	@Edad int, 
	@FechaNacimiento Datetime


AS BEGIN
SET NOCOUNT ON

  BEGIN TRANSACTION TRASA

    BEGIN TRY
	
	UPDATE exp.Empleado SET
	 IdTipoIdentificacion= @IdTipoIdentificacion,
	 Identificacion= @Identificacion,
	 Nombre= @Nombre,
	 PrimerApellido=@PrimerApellido,
	 SegundoApellido=@SegundoApellido,
	 Edad= @Edad,
	 FechaNacimiento=@FechaNacimiento
	WHERE 
	       IdEmpleado=@IdEmpleado
	
	  COMMIT TRANSACTION TRASA
	  SELECT 0 AS CodeError, '' AS MsgError

  END TRY

  BEGIN CATCH

	   SELECT 
			 ERROR_NUMBER() AS CodeError,
			 ERROR_MESSAGE() AS MsgError
   
	   ROLLBACK TRANSACTION TRASA

   END CATCH

 END
GO
PRINT N'Altering Procedure [exp].[EmpleadoInsertar]...';


GO
ALTER PROCEDURE [exp].[EmpleadoInsertar]
	@IdTipoIdentificacion int,	
	@Identificacion varchar(50),
	@Nombre varchar(50),
	@PrimerApellido varchar(50),
	@SegundoApellido varchar(50),
	@Edad int, 
	@FechaNacimiento Datetime

AS BEGIN
SET NOCOUNT ON

  BEGIN TRANSACTION TRASA

    BEGIN TRY
	
	INSERT INTO exp.Empleado
	(IdTipoIdentificacion,
	 Identificacion,
	 Nombre,
	 PrimerApellido,
	 SegundoApellido,
	 Edad,
	 FechaNacimiento
	)
	VALUES
	(
	@IdTipoIdentificacion,
	@Identificacion,
	@Nombre,
	@PrimerApellido,
	@SegundoApellido,
	@Edad,
	@FechaNacimiento
	)

  COMMIT TRANSACTION TRASA
  SELECT 0 AS CodeError, '' AS MsgError

  END TRY

  BEGIN CATCH

   SELECT 
         ERROR_NUMBER() AS CodeError,
		 ERROR_MESSAGE() AS MsgError
   
   ROLLBACK TRANSACTION TRASA

   END CATCH

 END
GO
PRINT N'Altering Procedure [exp].[EmpleadoObtener]...';


GO
ALTER PROCEDURE [exp].[EmpleadoObtener]
      @IdEmpleado int= NULL
AS BEGIN
  SET NOCOUNT ON

  SELECT 
     E.IdEmpleado,
     E.Identificacion,
     E.Nombre,
     E.PrimerApellido,
     E.SegundoApellido,
     E.Edad,
     E.FechaNacimiento,
     
     T.IdTipoIdentificacion,
     T.Descripcion

    FROM EXP.Empleado E
    INNER JOIN TipoIdentificacion T
       ON E.IdTipoIdentificacion= T.IdTipoIdentificacion
    WHERE
    (@IdEmpleado IS NULL OR IdEmpleado=@IdEmpleado)

END
GO
PRINT N'Creating Procedure [acc].[ContratoObtener]...';


GO
CREATE PROCEDURE [acc].[ContratoObtener]
      @IdContrato int= NULL
AS BEGIN
  SET NOCOUNT ON

  SELECT 
     C.IdContrato,
	 C.TipoContrato,
	 C.FechaInicio,
	 C.FechaFin,
     
     E.IdEmpleado,
     E.Identificacion

    FROM Contrato C
    INNER JOIN Empleado E
       ON E.IdEmpleado= C.IdEmpleado
    WHERE
    (@IdContrato IS NULL OR IdContrato=@IdContrato)

END
GO
PRINT N'Creating Procedure [acc].[ContratoInsertar]...';


GO
CREATE PROCEDURE [acc].[ContratoInsertar]	
	@IdEmpleado int,
	@TipoContrato varchar(50),
	@FechaInicio Datetime,
	@FechaFin Datetime

AS BEGIN
SET NOCOUNT ON

  BEGIN TRANSACTION TRASA

    BEGIN TRY
	
	INSERT INTO acc.Contrato
	(IdEmpleado,
	 TipoContrato,
	 FechaInicio,
	 FechaFin
	)
	VALUES
	(
	@IdEmpleado,
	@TipoContrato,
	@FechaInicio,
	@FechaFin

	)

  COMMIT TRANSACTION TRASA
  SELECT 0 AS CodeError, '' AS MsgError

  END TRY

  BEGIN CATCH

   SELECT 
         ERROR_NUMBER() AS CodeError,
		 ERROR_MESSAGE() AS MsgError
   
   ROLLBACK TRANSACTION TRASA

   END CATCH

 END
GO
PRINT N'Creating Procedure [acc].[ContratoEliminar]...';


GO
CREATE PROCEDURE [acc].[ContratoEliminar]
 @IdContrato int


AS BEGIN
SET NOCOUNT ON

  BEGIN TRANSACTION TRASA

    BEGIN TRY
            DELETE FROM acc.Contrato WHERE IdContrato=@IdContrato
	
	  COMMIT TRANSACTION TRASA
	  SELECT 0 AS CodeError, '' AS MsgError

  END TRY

  BEGIN CATCH

	   SELECT 
			 ERROR_NUMBER() AS CodeError,
			 ERROR_MESSAGE() AS MsgError
   
	   ROLLBACK TRANSACTION TRASA

   END CATCH

 END
GO
PRINT N'Creating Procedure [acc].[ContratoActualizar]...';


GO
CREATE PROCEDURE [acc].[ContratoActualizar]
    @IdContrato int,	
	@IdEmpleado int,
	@TipoContrato varchar(50),
	@FechaInicio Datetime,
	@FechaFin Datetime


AS BEGIN
SET NOCOUNT ON

  BEGIN TRANSACTION TRASA

    BEGIN TRY
	
	UPDATE acc.Contrato SET
	 IdEmpleado= @IdEmpleado,
	 TipoContrato= @TipoContrato,
	 FechaInicio= @FechaInicio,
	 FechaFin=@FechaFin
	WHERE 
	       IdContrato=@IdContrato
	
	  COMMIT TRANSACTION TRASA
	  SELECT 0 AS CodeError, '' AS MsgError

  END TRY

  BEGIN CATCH

	   SELECT 
			 ERROR_NUMBER() AS CodeError,
			 ERROR_MESSAGE() AS MsgError
   
	   ROLLBACK TRANSACTION TRASA

   END CATCH

 END
GO
PRINT N'Creating Procedure [dbo].[TipoIdentificacionLista]...';


GO
CREATE PROCEDURE [dbo].[TipoIdentificacionLista]
AS
	BEGIN
	SET NOCOUNT ON


	SELECT
	 IdTipoIdentificacion,
	 Descripcion
	FROM TipoIdentificacion


	END
GO
PRINT N'Refreshing Procedure [exp].[EmpleadoEliminar]...';


GO
EXECUTE sp_refreshsqlmodule N'[exp].[EmpleadoEliminar]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [exp].[Empleado] WITH CHECK CHECK CONSTRAINT [FK_Empleado_TipoIdentificacion];

ALTER TABLE [acc].[Contrato] WITH CHECK CHECK CONSTRAINT [FK_Empleado_Contrato];


GO
PRINT N'Update complete.';


GO
