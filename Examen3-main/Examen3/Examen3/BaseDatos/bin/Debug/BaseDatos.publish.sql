/*
Deployment script for SistemaRH

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SistemaRH"
:setvar DefaultFilePrefix "SistemaRH"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The table [dbo].[Producto] is being dropped and re-created since all non-computed columns within the table have been redefined.
*/

IF EXISTS (select top 1 1 from [dbo].[Producto])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping Foreign Key [exp].[FK_Orden_Producto]...';


GO
ALTER TABLE [exp].[Orden] DROP CONSTRAINT [FK_Orden_Producto];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_Orden_Producto]...';


GO
ALTER TABLE [dbo].[Orden] DROP CONSTRAINT [FK_Orden_Producto];


GO
PRINT N'Dropping Table [dbo].[Producto]...';


GO
DROP TABLE [dbo].[Producto];


GO
PRINT N'Creating Table [dbo].[Producto]...';


GO
CREATE TABLE [dbo].[Producto] (
    [ProductoId]  INT           IDENTITY (1, 1) NOT NULL,
    [Descripcion] VARCHAR (250) NOT NULL,
    [Estado]      BIT           NOT NULL,
    CONSTRAINT [PK_Producto] PRIMARY KEY CLUSTERED ([ProductoId] ASC)
)
WITH (DATA_COMPRESSION = PAGE);


GO
PRINT N'Creating Table [dbo].[Clientes]...';


GO
CREATE TABLE [dbo].[Clientes] (
    [ClientesId]     INT           IDENTITY (1, 1) NOT NULL,
    [NombreCompleto] VARCHAR (250) NOT NULL,
    [Direccion]      VARCHAR (500) NOT NULL,
    [Telefono]       VARCHAR (500) NOT NULL,
    [Estado]         BIT           NULL,
    CONSTRAINT [PK_Clientes] PRIMARY KEY CLUSTERED ([ClientesId] ASC)
)
WITH (DATA_COMPRESSION = PAGE);


GO
PRINT N'Creating Table [dbo].[Compra]...';


GO
CREATE TABLE [dbo].[Compra] (
    [IdCompra]      INT             IDENTITY (1, 1) NOT NULL,
    [ClientesId]    INT             NOT NULL,
    [ProductoId]    INT             NOT NULL,
    [FechaCompra]   DATETIME        NOT NULL,
    [Monto]         DECIMAL (18, 2) NOT NULL,
    [Impuesto]      DECIMAL (18, 2) NOT NULL,
    [Total]         DECIMAL (18, 2) NOT NULL,
    [Observaciones] VARCHAR (1000)  NULL,
    [Estado]        BIT             NULL,
    CONSTRAINT [PK_Compra] PRIMARY KEY CLUSTERED ([IdCompra] ASC)
)
WITH (DATA_COMPRESSION = PAGE);


GO
PRINT N'Creating Table [dbo].[Usuarios]...';


GO
CREATE TABLE [dbo].[Usuarios] (
    [UsuariosId] INT             IDENTITY (1, 1) NOT NULL,
    [Usuario]    VARCHAR (250)   NOT NULL,
    [Nombre]     VARCHAR (500)   NOT NULL,
    [Contrasena] VARBINARY (MAX) NOT NULL,
    [Estado]     BIT             NOT NULL,
    CONSTRAINT [PK_Usuarios] PRIMARY KEY CLUSTERED ([UsuariosId] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Compra_Cliente]...';


GO
ALTER TABLE [dbo].[Compra] WITH NOCHECK
    ADD CONSTRAINT [FK_Compra_Cliente] FOREIGN KEY ([ClientesId]) REFERENCES [dbo].[Clientes] ([ClientesId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Compra_Producto]...';


GO
ALTER TABLE [dbo].[Compra] WITH NOCHECK
    ADD CONSTRAINT [FK_Compra_Producto] FOREIGN KEY ([ProductoId]) REFERENCES [dbo].[Producto] ([ProductoId]);


GO
PRINT N'Altering Procedure [dbo].[ProductoLista]...';


GO
ALTER PROCEDURE [dbo].[ProductoLista]
	AS
	BEGIN
	SET NOCOUNT ON


	SELECT
	 ProductoId,
	 Descripcion
	FROM Producto
	WHERE Estado=1


	END
GO
PRINT N'Creating Procedure [dbo].[ClientesActualizar]...';


GO
CREATE PROCEDURE [dbo].ClientesActualizar
	@ClientesId INT,
	@NombreCompleto VARCHAR(500),
	@Direccion varchar(250),
	@Telefono varchar(250),
    @Estado BIT
	
	
AS BEGIN
SET NOCOUNT ON

	BEGIN TRANSACTION TRASA

	BEGIN TRY

		
		update dbo.Clientes set     
	      NombreCompleto=@NombreCompleto,
		  Direccion=@Direccion,
		  Telefono=@Telefono,
		  Estado=@Estado
		where ClientesId=@ClientesId


		COMMIT TRANSACTION TRASA
		
		SELECT 0 AS CodeError, '' AS MsgError



	END TRY

	BEGIN CATCH
		SELECT 
				ERROR_NUMBER() AS CodeError
			,	ERROR_MESSAGE() AS MsgError

			ROLLBACK TRANSACTION TRASA
	END CATCH


END
GO
PRINT N'Creating Procedure [dbo].[ClientesEliminar]...';


GO
CREATE PROCEDURE [dbo].ClientesEliminar
@ClientesId int
AS BEGIN
SET NOCOUNT ON

	BEGIN TRANSACTION TRASA

	BEGIN TRY

		
	DELETE FROM Dbo.Clientes WHERE ClientesId=@ClientesId


		COMMIT TRANSACTION TRASA
		
		SELECT 0 AS CodeError, '' AS MsgError



	END TRY

	BEGIN CATCH
		SELECT 
				ERROR_NUMBER() AS CodeError
			,	ERROR_MESSAGE() AS MsgError

			ROLLBACK TRANSACTION TRASA
	END CATCH


END
GO
PRINT N'Creating Procedure [dbo].[ClientesInsertar]...';


GO
CREATE PROCEDURE [dbo].ClientesInsertar
	@NombreCompleto VARCHAR(500),
	@Direccion varchar(250),
	@Telefono varchar(250),
    @Estado BIT
	
	
AS BEGIN
SET NOCOUNT ON

	BEGIN TRANSACTION TRASA

	BEGIN TRY

		
		INSERT INTO dbo.Clientes 
		(	       
	      NombreCompleto,
		  Direccion,
		  Telefono,
		  Estado
		)
		VALUES
		(
		
	      @NombreCompleto,
		  @Direccion,
		  @Telefono,
		  @Estado
		)


		COMMIT TRANSACTION TRASA
		
		SELECT 0 AS CodeError, '' AS MsgError



	END TRY

	BEGIN CATCH
		SELECT 
				ERROR_NUMBER() AS CodeError
			,	ERROR_MESSAGE() AS MsgError

			ROLLBACK TRANSACTION TRASA
	END CATCH


END
GO
PRINT N'Creating Procedure [dbo].[ClientesLista]...';


GO
CREATE PROCEDURE [dbo].[ClientesLista]
AS
	BEGIN
	SET NOCOUNT ON


	SELECT
	 ClientesId,
	 NombreCompleto
	FROM Clientes
	WHERE Estado=1


	END
GO
PRINT N'Creating Procedure [dbo].[ClientesObtener]...';


GO
CREATE PROCEDURE [dbo].ClientesObtener
	@ClientesId INT= null
AS
	begin
	SET NOCOUNT ON


	 SELECT
	 ClientesId,
	 NombreCompleto,
	 Direccion,
	 Telefono,
	 Estado

	 FROM dbo.Clientes
	 WHERE

	 (@ClientesId IS NULL OR ClientesId=@ClientesId)



	end
GO
PRINT N'Creating Procedure [dbo].[CompraActualizar]...';


GO
CREATE PROCEDURE [dbo].[CompraActualizar]
	 @IdCompra INT,
	 @ClientesId INT,
	 @ProductoId INT,
	 @FechaCompra DATE,
	 @Monto DECIMAL(18,2),
	 @Impuesto DECIMAL(18,2),
	 @Total DECIMAL(18,2),
	 @Observaciones VARCHAR(1000),
	 @Estado BIT
AS BEGIN
SET NOCOUNT ON

	BEGIN TRANSACTION TRASA

	BEGIN TRY
	-- AQUI VA EL CODIGO
		
	UPDATE dbo.Compra SET
	 ClientesId=@ClientesId,
	 ProductoId=@ProductoId,
	 FechaCompra=@FechaCompra,
	 Monto=@Monto,
	 Impuesto=@Impuesto,
	 Total=@Total,
	 Observaciones=@Observaciones,
     Estado=@Estado

	WHERE IdCompra=@IdCompra

		COMMIT TRANSACTION TRASA
		
		SELECT 0 AS CodeError, '' AS MsgError



	END TRY

	BEGIN CATCH
		SELECT 
				ERROR_NUMBER() AS CodeError
			,	ERROR_MESSAGE() AS MsgError

			ROLLBACK TRANSACTION TRASA
	END CATCH


END
GO
PRINT N'Creating Procedure [dbo].[CompraEliminar]...';


GO
CREATE PROCEDURE [dbo].[CompraEliminar]
	@IdCompra int
AS BEGIN
SET NOCOUNT ON

	BEGIN TRANSACTION TRASA

	BEGIN TRY

		
	DELETE FROM Dbo.Compra WHERE IdCompra=@IdCompra


		COMMIT TRANSACTION TRASA
		
		SELECT 0 AS CodeError, '' AS MsgError



	END TRY

	BEGIN CATCH
		SELECT 
				ERROR_NUMBER() AS CodeError
			,	ERROR_MESSAGE() AS MsgError

			ROLLBACK TRANSACTION TRASA
	END CATCH


END
GO
PRINT N'Creating Procedure [dbo].[CompraInsertar]...';


GO
CREATE PROCEDURE [dbo].[CompraInsertar]
	 @ClientesId INT,
	 @ProductoId INT,
	 @FechaCompra DATE,
	 @Monto DECIMAL(18,2),
	 @Impuesto DECIMAL(18,2),
	 @Total DECIMAL(18,2),
	 @Observaciones VARCHAR(1000),
	 @Estado BIT
	
AS BEGIN
SET NOCOUNT ON

	BEGIN TRANSACTION TRASA

	BEGIN TRY
	-- AQUI VA EL CODIGO
		
		INSERT INTO dbo.Compra 
		(
	       ClientesId 
	    ,  ProductoId 
	    ,  FechaCompra
	    ,  Monto
		,  Impuesto
		,  Total
		,  Observaciones
		,  Estado
		)
		VALUES
		(
		   @ClientesId
	    ,  @ProductoId
	    ,  @FechaCompra
	    ,  @Monto
		,  @Impuesto
		,  @Total
		,  @Observaciones
		,  @Estado
		)


		COMMIT TRANSACTION TRASA
		
		SELECT 0 AS CodeError, '' AS MsgError



	END TRY

	BEGIN CATCH
		SELECT 
				ERROR_NUMBER() AS CodeError
			,	ERROR_MESSAGE() AS MsgError

			ROLLBACK TRANSACTION TRASA
	END CATCH


END
GO
PRINT N'Creating Procedure [dbo].[CompraObtener]...';


GO
CREATE PROCEDURE [dbo].[CompraObtener]
	@IdCompra INT=NULL

AS BEGIN
	SET NOCOUNT ON

	SELECT
			A.IdCompra
		,   A.FechaCompra
		,   A.Monto
		,   A.Impuesto
		,   A.Total
		,   A.Observaciones
		,   A.Estado

		,   A.ClientesId
		,	C.NombreCompleto

		,   A.ProductoId	
		,	V.Descripcion
				

	FROM dbo.Compra A
	 INNER JOIN dbo.Clientes C
         ON A.ClientesId = C.ClientesId
     INNER JOIN dbo.Producto V
         ON A.ProductoId = V.ProductoId
	 
	WHERE
	     (@IdCompra IS NULL OR A.IdCompra=@IdCompra)

END
GO
PRINT N'Creating Procedure [dbo].[Login]...';


GO
CREATE PROCEDURE dbo.Login
@Usuario VARCHAR(250),
@Contrasena VARCHAR(250)
AS 
BEGIN
SET NOCOUNT  ON


DECLARE @ContrasenaSHA1 VARBINARY(MAX)=(SELECT HASHBYTES('SHA1',@Contrasena));

IF NOT EXISTS(SELECT * FROM Usuarios WHERE Usuario=@Usuario) BEGIN
	SELECT -1 AS CodeError, 'El nombre del usuario no existe' AS MsgError

END
ELSE IF EXISTS( SELECT * FROM Usuarios WHERE Usuario=@Usuario AND Estado =0) BEGIN
 
 SELECT -1 AS CodeError, 'El Usuario se encuentra inactivo!' AS MsgError
END
ELSE IF  NOT EXISTS( SELECT * FROM Usuarios WHERE Usuario=@Usuario and Contrasena=@ContrasenaSHA1 AND Estado =1) BEGIN
 
 SELECT -1 AS CodeError, 'La contraseña es incorrecta por favor volver a intentar!' AS MsgError
END
ELSE BEGIN

	SELECT 
	0 AS CodeError,
	UsuariosId,
	Usuario,
	Nombre

	FROM Usuarios 
		WHERE Usuario=@Usuario and Contrasena=@ContrasenaSHA1 

END



	

END
GO
PRINT N'Creating Procedure [dbo].[ProductoActualizar]...';


GO
CREATE PROCEDURE [dbo].[ProductoActualizar]
	@ProductoId INT,
	@Descripcion VARCHAR(500),
    @Estado BIT
	
	
AS BEGIN
SET NOCOUNT ON

	BEGIN TRANSACTION TRASA

	BEGIN TRY

		
		update dbo.Producto set     
	      Descripcion=@Descripcion,
		  Estado=@Estado
		where ProductoId=@ProductoId


		COMMIT TRANSACTION TRASA
		
		SELECT 0 AS CodeError, '' AS MsgError



	END TRY

	BEGIN CATCH
		SELECT 
				ERROR_NUMBER() AS CodeError
			,	ERROR_MESSAGE() AS MsgError

			ROLLBACK TRANSACTION TRASA
	END CATCH


END
GO
PRINT N'Creating Procedure [dbo].[ProductoEliminar]...';


GO
CREATE PROCEDURE [dbo].[ProductoEliminar]
	@ProductoId int
AS BEGIN
SET NOCOUNT ON

	BEGIN TRANSACTION TRASA

	BEGIN TRY

		
	DELETE FROM Dbo.Producto WHERE ProductoId=@ProductoId


		COMMIT TRANSACTION TRASA
		
		SELECT 0 AS CodeError, '' AS MsgError



	END TRY

	BEGIN CATCH
		SELECT 
				ERROR_NUMBER() AS CodeError
			,	ERROR_MESSAGE() AS MsgError

			ROLLBACK TRANSACTION TRASA
	END CATCH


END
GO
PRINT N'Creating Procedure [dbo].[ProductoInsertar]...';


GO
CREATE PROCEDURE [dbo].[ProductoInsertar]
	@Descripcion VARCHAR(500),
    @Estado BIT
	
	
AS BEGIN
SET NOCOUNT ON

	BEGIN TRANSACTION TRASA

	BEGIN TRY

		
		INSERT INTO dbo.Producto
		(	       
	      Descripcion,
		  Estado
		)
		VALUES
		(
		
	      @Descripcion,
		  @Estado
		)


		COMMIT TRANSACTION TRASA
		
		SELECT 0 AS CodeError, '' AS MsgError



	END TRY

	BEGIN CATCH
		SELECT 
				ERROR_NUMBER() AS CodeError
			,	ERROR_MESSAGE() AS MsgError

			ROLLBACK TRANSACTION TRASA
	END CATCH


END
GO
PRINT N'Creating Procedure [dbo].[ProductoObtener]...';


GO
CREATE PROCEDURE [dbo].[ProductoObtener]
		@ProductoId INT= null
AS
	begin
	SET NOCOUNT ON


	 SELECT
	 ProductoId,
	 Descripcion,
	 Estado

	 FROM dbo.Producto
	 WHERE

	 (@ProductoId IS NULL OR ProductoId=@ProductoId)



	end
GO
PRINT N'Creating Procedure [dbo].[UsuarioRegistrar]...';


GO
CREATE PROCEDURE dbo.UsuarioRegistrar
@Usuario varchar(250),
@Nombre varchar(500),
@Contrasena VARCHAR(250)
AS BEGIN
SET NOCOUNT ON

	BEGIN TRANSACTION TRASA

	BEGIN TRY
	-- AQUI VA EL CODIGO
		
DECLARE @ContrasenaSHA1 VARBINARY(MAX)=(SELECT HASHBYTES('SHA1',@Contrasena));

	IF NOT EXISTS( SELECT * FROM dbo.Usuarios WHERE @Usuario=Usuario) BEGIN

				INSERT INTO dbo.Usuarios
					(Usuario,Nombre,Contrasena,Estado)
					VALUES
					(@Usuario,@Nombre,@ContrasenaSHA1,1)

		
		
		SELECT 0 AS CodeError, '' AS MsgError

		END
		ELSE BEGIN 
		
			SELECT -1 AS CodeError, 'Este Usuario se encuetra en uso por favor ingresar otro usuario!' AS MsgError


		END


		COMMIT TRANSACTION TRASA


	END TRY

	BEGIN CATCH
		SELECT 
				ERROR_NUMBER() AS CodeError
			,	ERROR_MESSAGE() AS MsgError

			ROLLBACK TRANSACTION TRASA
	END CATCH


END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Compra] WITH CHECK CHECK CONSTRAINT [FK_Compra_Cliente];

ALTER TABLE [dbo].[Compra] WITH CHECK CHECK CONSTRAINT [FK_Compra_Producto];


GO
PRINT N'Update complete.';


GO
